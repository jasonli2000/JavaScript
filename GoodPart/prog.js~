// This is to test the object property
//
document.writeln();
var empty={};
var person_a={
  "first-name": "Joe",
  "last-name": "Kevin"
};

var flight = {
  airline: "Delta",
  flight_no: 885,
  departure: {
    from: "Chicago",
    time: "9:30AM"
  }
};

document.writeln("Javascript Object properties");
document.writeln(person_a['first-name'] + ' ' + person_a['last-name']);
document.writeln(flight.airline + ' ' + flight.flight_no);
document.writeln(flight.departure.from + ' ' + flight.departure.time);

// this is to Test java script function object
//

// Function invocation modes
//
// Method invocation pattern

var myObject = {
  value: 0,
  // this is a method named increment
  increment: function(inc){
    this.value += typeof inc === 'number' ? inc : 1;
  }
}

document.writeln("Javascript Object method invocation");
myObject.increment();
document.writeln("value is: " + myObject.value);
myObject.increment(2)
document.writeln("value is: " + myObject.value);

// function invocation pattern
var add = function(a, b) {
  return a + b;
};

var sum = add(3, 4);
document.writeln("Javascript Object function invocation");
document.writeln("sum of 3 + 4 is: " + sum);

// helper with inner function
//
myObject.double = function(){
  var that = this;
  var helper = function(){
    that.value = add(that.value, that.value);
  };
  helper();
};


document.writeln("Javascript Object function apply method");
myObject.double();
document.writeln("After double, value is: " + myObject.value);
// Apply method of function object
//
// The first argument is the value that should be bound to this
// the second argument is an array of parameters
var ret = add.apply(null, [3,5]);
document.writeln("add.apply(null, [3,5]) is: " + ret);

// Function arguments
// This is a bonus array like object, the only properties is length
//
// Make a function that adds a lot of stuff.
// Note that defining the variable sum inside of
// the function does not interfere with the sum
// defined outside of the function. The function
// only sees the inner one.

var sum = function () {
  var i, sum = 0;
  for (i = 0; i < arguments.length; i += 1) {
    sum += arguments[i];
  }
  return sum;
};


document.writeln("Javascript function arguments");
document.writeln(sum(4, 8, 15, 16, 23, 42)); // 108

// exception
//
//
var add = function (a, b) {
  if (typeof a !== 'number' || typeof b !== 'number') {
    throw {
      name: 'TypeError',
      message: 'add needs numbers'
    };
  }
  return a + b;
}
// Make a try_it function that calls the new add
// function incorrectly.
var try_it = function ( ) {
  try {
    add("seven");
  } catch (e) {
    document.writeln(e.name + ': ' + e.message);
  }
}

document.writeln("Javascript Exception");
try_it( );

// scope
//
// only has function scope and no block scope
//
var foo = function ( ) {
  var a = 3, b = 5;
  document.writeln("a=: " + a + " b:= " + b);
  var bar = function ( ) {
    var b = 7, c = 11;
    document.writeln("a=: " + a + " b:= " + b);
    // At this point, a is 3, b is 7, and c is 11
    a += b + c;
    document.writeln("a=: " + a + " b:= " + b);
    // At this point, a is 21, b is 7, and c is 11
  };
  // At this point, a is 3, b is 5, and c is not defined
  bar( );
  // At this point, a is 21, b is 5
  document.writeln("a=: " + a + " b:= " + b);
};

document.writeln("Javascript Variable Scope");
foo();

// ## closure ##
//
// expose the value thru the inner function
//
var myObject = function ( ) {
  var value = 0;
  return {
    increment: function (inc) {
      value += typeof inc === 'number' ? inc : 1;
    },
    getValue: function ( ) {
      return value;
    }
  };
}( ); // notice this is not assignning a function to myObject,
// This is actual a function call, and the result of the function call
// is assigned to myObject

document.writeln("Javascript function closure");
document.writeln(typeof myObject);
document.writeln(typeof myObject.increment);
document.writeln(typeof myObject.getValue);
for (var idx=0; idx < 5; idx++){
  document.writeln("value of myObject is: " + myObject.getValue());
  myObject.increment();
}

var quo = function (status) {
  return {
    get_status: function ( ) {
      return status;
    }
  };
};

// Make an instance of quo.
var myQuo = quo("amazed");
document.writeln(myQuo.get_status( ));

var fade = function (node) {
var level = 1;
var step = function ( ) {
var hex = level.toString(16);
node.style.backgroundColor = '#FFFF' + hex + hex;
if (level < 15) {
level += 1;
setTimeout(step, 100);
}
};
setTimeout(step, 100);
};
fade(document.body);

